
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800200  00001050  000010e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800282  00800282  00001166  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a28  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001180  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f30  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00004e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000903  00000000  00000000  00005370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093a  00000000  00000000  00005c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000065ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	af c4       	rjmp	.+2398   	; 0xa38 <__vector_54>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e5       	ldi	r30, 0x50	; 80
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 38       	cpi	r26, 0x82	; 130
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a2 e8       	ldi	r26, 0x82	; 130
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	aa 30       	cpi	r26, 0x0A	; 10
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	bd d1       	rcall	.+890    	; 0x49a <main>
     120:	95 c7       	rjmp	.+3882   	; 0x104c <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_ADC_8>:
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	8a e7       	ldi	r24, 0x7A	; 122
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	27 e8       	ldi	r18, 0x87	; 135
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
     136:	8c e7       	ldi	r24, 0x7C	; 124
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	20 e6       	ldi	r18, 0x60	; 96
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
     140:	8b e7       	ldi	r24, 0x7B	; 123
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	fc 01       	movw	r30, r24
     146:	10 82       	st	Z, r1
     148:	00 00       	nop
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <ADC_read_8>:
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	1f 92       	push	r1
     156:	1f 92       	push	r1
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	8a 83       	std	Y+2, r24	; 0x02
     15e:	19 82       	std	Y+1, r1	; 0x01
     160:	8c e7       	ldi	r24, 0x7C	; 124
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	2c e7       	ldi	r18, 0x7C	; 124
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	f9 01       	movw	r30, r18
     16a:	20 81       	ld	r18, Z
     16c:	32 2f       	mov	r19, r18
     16e:	30 7e       	andi	r19, 0xE0	; 224
     170:	2a 81       	ldd	r18, Y+2	; 0x02
     172:	23 2b       	or	r18, r19
     174:	fc 01       	movw	r30, r24
     176:	20 83       	st	Z, r18
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	2c e7       	ldi	r18, 0x7C	; 124
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	f9 01       	movw	r30, r18
     182:	20 81       	ld	r18, Z
     184:	20 62       	ori	r18, 0x20	; 32
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	8a e7       	ldi	r24, 0x7A	; 122
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2a e7       	ldi	r18, 0x7A	; 122
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	20 64       	ori	r18, 0x40	; 64
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	8a e7       	ldi	r24, 0x7A	; 122
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	88 2f       	mov	r24, r24
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	80 71       	andi	r24, 0x10	; 16
     1ac:	99 27       	eor	r25, r25
     1ae:	89 2b       	or	r24, r25
     1b0:	b1 f3       	breq	.-20     	; 0x19e <ADC_read_8+0x4e>
     1b2:	89 e7       	ldi	r24, 0x79	; 121
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <init_PWM>:

void changeHorizontal (uint8_t destination) //pass in start duty cycle, stop duty cycle, time interval in ms, and number of steps desired
{
	OCR3B = destination;
	ms_delay(1000);
}
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	80 e9       	ldi	r24, 0x90	; 144
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	2b ea       	ldi	r18, 0xAB	; 171
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
     1da:	81 e9       	ldi	r24, 0x91	; 145
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	2c e0       	ldi	r18, 0x0C	; 12
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
     1e4:	88 e9       	ldi	r24, 0x98	; 152
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	fc 01       	movw	r30, r24
     1ea:	11 82       	std	Z+1, r1	; 0x01
     1ec:	10 82       	st	Z, r1
     1ee:	8a e9       	ldi	r24, 0x9A	; 154
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	fc 01       	movw	r30, r24
     1f4:	11 82       	std	Z+1, r1	; 0x01
     1f6:	10 82       	st	Z, r1
     1f8:	8c e9       	ldi	r24, 0x9C	; 156
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	fc 01       	movw	r30, r24
     1fe:	11 82       	std	Z+1, r1	; 0x01
     200:	10 82       	st	Z, r1
     202:	00 00       	nop
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <init_INT>:
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	89 e6       	ldi	r24, 0x69	; 105
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	23 e0       	ldi	r18, 0x03	; 3
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
     21c:	8d e3       	ldi	r24, 0x3D	; 61
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18
     226:	00 00       	nop
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	08 95       	ret

0000022e <home>:
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
     236:	8a e9       	ldi	r24, 0x9A	; 154
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	2a e3       	ldi	r18, 0x3A	; 58
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	fc 01       	movw	r30, r24
     240:	31 83       	std	Z+1, r19	; 0x01
     242:	20 83       	st	Z, r18
     244:	88 e9       	ldi	r24, 0x98	; 152
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	25 e5       	ldi	r18, 0x55	; 85
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	31 83       	std	Z+1, r19	; 0x01
     250:	20 83       	st	Z, r18
     252:	8c e9       	ldi	r24, 0x9C	; 156
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	28 e7       	ldi	r18, 0x78	; 120
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	fc 01       	movw	r30, r24
     25c:	31 83       	std	Z+1, r19	; 0x01
     25e:	20 83       	st	Z, r18
     260:	00 00       	nop
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <changeVertical>:
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	1f 92       	push	r1
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	88 e9       	ldi	r24, 0x98	; 152
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	29 81       	ldd	r18, Y+1	; 0x01
     27a:	22 2f       	mov	r18, r18
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	fc 01       	movw	r30, r24
     280:	31 83       	std	Z+1, r19	; 0x01
     282:	20 83       	st	Z, r18
     284:	88 ee       	ldi	r24, 0xE8	; 232
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	09 d3       	rcall	.+1554   	; 0x89c <ms_delay>
     28a:	00 00       	nop
     28c:	0f 90       	pop	r0
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <changeHook>:

void changeHook (uint8_t destination) //pass in start duty cycle, stop duty cycle, time interval in ms, and number of steps desired
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	1f 92       	push	r1
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	89 83       	std	Y+1, r24	; 0x01
	OCR3C = destination;
     2a0:	8c e9       	ldi	r24, 0x9C	; 156
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	29 81       	ldd	r18, Y+1	; 0x01
     2a6:	22 2f       	mov	r18, r18
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	fc 01       	movw	r30, r24
     2ac:	31 83       	std	Z+1, r19	; 0x01
     2ae:	20 83       	st	Z, r18
	ms_delay(1000);
     2b0:	88 ee       	ldi	r24, 0xE8	; 232
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	f3 d2       	rcall	.+1510   	; 0x89c <ms_delay>
}
     2b6:	00 00       	nop
     2b8:	0f 90       	pop	r0
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <pickUp>:

void pickUp (void)
{
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
	changeVertical(DOWN);
     2c8:	8f e5       	ldi	r24, 0x5F	; 95
     2ca:	ce df       	rcall	.-100    	; 0x268 <changeVertical>
	ms_delay(500);
     2cc:	84 ef       	ldi	r24, 0xF4	; 244
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	e5 d2       	rcall	.+1482   	; 0x89c <ms_delay>
	changeHook(GRAB);
     2d2:	8f e3       	ldi	r24, 0x3F	; 63
     2d4:	df df       	rcall	.-66     	; 0x294 <changeHook>
	ms_delay(500);
     2d6:	84 ef       	ldi	r24, 0xF4	; 244
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	e0 d2       	rcall	.+1472   	; 0x89c <ms_delay>
	changeVertical(UP);
     2dc:	85 e5       	ldi	r24, 0x55	; 85
     2de:	c4 df       	rcall	.-120    	; 0x268 <changeVertical>
	ms_delay(500);
     2e0:	84 ef       	ldi	r24, 0xF4	; 244
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	db d2       	rcall	.+1462   	; 0x89c <ms_delay>
     2e6:	00 00       	nop
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <putDown>:
     2ee:	cf 93       	push	r28

void putDown (void)
{
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
	changeVertical(DOWN);
     2f6:	8f e5       	ldi	r24, 0x5F	; 95
     2f8:	b7 df       	rcall	.-146    	; 0x268 <changeVertical>
	ms_delay(500);
     2fa:	84 ef       	ldi	r24, 0xF4	; 244
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	ce d2       	rcall	.+1436   	; 0x89c <ms_delay>
	changeHook(RELEASE);
     300:	88 e7       	ldi	r24, 0x78	; 120
     302:	c8 df       	rcall	.-112    	; 0x294 <changeHook>
	ms_delay(500);
     304:	84 ef       	ldi	r24, 0xF4	; 244
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	c9 d2       	rcall	.+1426   	; 0x89c <ms_delay>
	changeVertical(UP);
     30a:	85 e5       	ldi	r24, 0x55	; 85
     30c:	ad df       	rcall	.-166    	; 0x268 <changeVertical>
	ms_delay(500);
     30e:	84 ef       	ldi	r24, 0xF4	; 244
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	c4 d2       	rcall	.+1416   	; 0x89c <ms_delay>
     314:	00 00       	nop
}
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <EEPROM_write_one_char>:
     31c:	cf 93       	push	r28
		EEPROM_data = EEPROM_read_one(address);
		*EEPROM_buf_ptr = EEPROM_data;
		address++;		//increments
		EEPROM_buf_ptr++;
	}
}
     31e:	df 93       	push	r29
     320:	00 d0       	rcall	.+0      	; 0x322 <EEPROM_write_one_char+0x6>
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	9a 83       	std	Y+2, r25	; 0x02
     328:	89 83       	std	Y+1, r24	; 0x01
     32a:	6b 83       	std	Y+3, r22	; 0x03
     32c:	00 00       	nop
     32e:	8f e3       	ldi	r24, 0x3F	; 63
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	fc 01       	movw	r30, r24
     334:	80 81       	ld	r24, Z
     336:	88 2f       	mov	r24, r24
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	82 70       	andi	r24, 0x02	; 2
     33c:	99 27       	eor	r25, r25
     33e:	89 2b       	or	r24, r25
     340:	b1 f7       	brne	.-20     	; 0x32e <EEPROM_write_one_char+0x12>
     342:	81 e4       	ldi	r24, 0x41	; 65
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	29 81       	ldd	r18, Y+1	; 0x01
     348:	3a 81       	ldd	r19, Y+2	; 0x02
     34a:	fc 01       	movw	r30, r24
     34c:	31 83       	std	Z+1, r19	; 0x01
     34e:	20 83       	st	Z, r18
     350:	80 e4       	ldi	r24, 0x40	; 64
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2b 81       	ldd	r18, Y+3	; 0x03
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
     35a:	8f e3       	ldi	r24, 0x3F	; 63
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	2f e3       	ldi	r18, 0x3F	; 63
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	f9 01       	movw	r30, r18
     364:	20 81       	ld	r18, Z
     366:	24 60       	ori	r18, 0x04	; 4
     368:	fc 01       	movw	r30, r24
     36a:	20 83       	st	Z, r18
     36c:	8f e3       	ldi	r24, 0x3F	; 63
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	2f e3       	ldi	r18, 0x3F	; 63
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	f9 01       	movw	r30, r18
     376:	20 81       	ld	r18, Z
     378:	22 60       	ori	r18, 0x02	; 2
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
     37e:	00 00       	nop
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <EEPROM_read_one>:
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	1f 92       	push	r1
     392:	1f 92       	push	r1
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	9a 83       	std	Y+2, r25	; 0x02
     39a:	89 83       	std	Y+1, r24	; 0x01
     39c:	00 00       	nop
     39e:	8f e3       	ldi	r24, 0x3F	; 63
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	fc 01       	movw	r30, r24
     3a4:	80 81       	ld	r24, Z
     3a6:	88 2f       	mov	r24, r24
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	82 70       	andi	r24, 0x02	; 2
     3ac:	99 27       	eor	r25, r25
     3ae:	89 2b       	or	r24, r25
     3b0:	b1 f7       	brne	.-20     	; 0x39e <EEPROM_read_one+0x12>
     3b2:	81 e4       	ldi	r24, 0x41	; 65
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	29 81       	ldd	r18, Y+1	; 0x01
     3b8:	3a 81       	ldd	r19, Y+2	; 0x02
     3ba:	fc 01       	movw	r30, r24
     3bc:	31 83       	std	Z+1, r19	; 0x01
     3be:	20 83       	st	Z, r18
     3c0:	8f e3       	ldi	r24, 0x3F	; 63
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2f e3       	ldi	r18, 0x3F	; 63
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	21 60       	ori	r18, 0x01	; 1
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	80 81       	ld	r24, Z
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <compare_strings>:

uint8_t compare_strings(char w1[], char w2[])
{
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <compare_strings+0x6>
     3ea:	1f 92       	push	r1
     3ec:	1f 92       	push	r1
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	9b 83       	std	Y+3, r25	; 0x03
     3f4:	8a 83       	std	Y+2, r24	; 0x02
     3f6:	7d 83       	std	Y+5, r23	; 0x05
     3f8:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t i = 0;
     3fa:	19 82       	std	Y+1, r1	; 0x01
	
	while (w1[i] == w2[i]) 
     3fc:	19 c0       	rjmp	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		if (w1[i] == '\0' || w2[i] == '\0')
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	88 2f       	mov	r24, r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2a 81       	ldd	r18, Y+2	; 0x02
     406:	3b 81       	ldd	r19, Y+3	; 0x03
     408:	82 0f       	add	r24, r18
     40a:	93 1f       	adc	r25, r19
     40c:	fc 01       	movw	r30, r24
     40e:	80 81       	ld	r24, Z
     410:	88 23       	and	r24, r24
     412:	11 f1       	breq	.+68     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	2c 81       	ldd	r18, Y+4	; 0x04
     41c:	3d 81       	ldd	r19, Y+5	; 0x05
     41e:	82 0f       	add	r24, r18
     420:	93 1f       	adc	r25, r19
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	88 23       	and	r24, r24
     428:	b9 f0       	breq	.+46     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		break;
		i++;
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	8f 5f       	subi	r24, 0xFF	; 255
     42e:	89 83       	std	Y+1, r24	; 0x01

uint8_t compare_strings(char w1[], char w2[])
{
	uint8_t i = 0;
	
	while (w1[i] == w2[i]) 
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	88 2f       	mov	r24, r24
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	2a 81       	ldd	r18, Y+2	; 0x02
     438:	3b 81       	ldd	r19, Y+3	; 0x03
     43a:	82 0f       	add	r24, r18
     43c:	93 1f       	adc	r25, r19
     43e:	fc 01       	movw	r30, r24
     440:	40 81       	ld	r20, Z
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	2c 81       	ldd	r18, Y+4	; 0x04
     44a:	3d 81       	ldd	r19, Y+5	; 0x05
     44c:	82 0f       	add	r24, r18
     44e:	93 1f       	adc	r25, r19
     450:	fc 01       	movw	r30, r24
     452:	80 81       	ld	r24, Z
     454:	48 17       	cp	r20, r24
     456:	99 f2       	breq	.-90     	; 0x3fe <compare_strings+0x1a>
		if (w1[i] == '\0' || w2[i] == '\0')
		break;
		i++;
	}
	
	if (w1[i] == '\0' && w2[i] == '\0')
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	88 2f       	mov	r24, r24
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	2a 81       	ldd	r18, Y+2	; 0x02
     460:	3b 81       	ldd	r19, Y+3	; 0x03
     462:	82 0f       	add	r24, r18
     464:	93 1f       	adc	r25, r19
     466:	fc 01       	movw	r30, r24
     468:	80 81       	ld	r24, Z
     46a:	88 23       	and	r24, r24
     46c:	69 f4       	brne	.+26     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	88 2f       	mov	r24, r24
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	2c 81       	ldd	r18, Y+4	; 0x04
     476:	3d 81       	ldd	r19, Y+5	; 0x05
     478:	82 0f       	add	r24, r18
     47a:	93 1f       	adc	r25, r19
     47c:	fc 01       	movw	r30, r24
     47e:	80 81       	ld	r24, Z
     480:	88 23       	and	r24, r24
     482:	11 f4       	brne	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	return 0;
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	01 c0       	rjmp	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
	else
	return 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <main>:
uint8_t i = 0;

//uint8_t test[6] = {55, 24, 18, 99, 12, 77};

int main(void)	
{
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	62 97       	sbiw	r28, 0x12	; 18
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	//initialize functions:
	init_PWM();
     4b2:	8a de       	rcall	.-748    	; 0x1c8 <init_PWM>
	init_ms_timer0();
     4b4:	da d1       	rcall	.+948    	; 0x86a <init_ms_timer0>
	init_ADC_8();
     4b6:	36 de       	rcall	.-916    	; 0x124 <init_ADC_8>
	init_UART();
     4b8:	31 d2       	rcall	.+1122   	; 0x91c <init_UART>
     4ba:	97 d2       	rcall	.+1326   	; 0x9ea <init_UART_3>
	init_UART_3();
     4bc:	a6 de       	rcall	.-692    	; 0x20a <init_INT>
     4be:	78 94       	sei
	init_INT();
     4c0:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <location_address+0x1>
	sei(); //enable interrupts
     4c4:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <location_address>
		
	location_address = 0x0000; //set address to 0
     4c8:	19 82       	std	Y+1, r1	; 0x01
     4ca:	81 e2       	ldi	r24, 0x21	; 33
     4cc:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t jason = 0;
     4ce:	fc 01       	movw	r30, r24
	uint8_t Hread[6]; //used to print eeprom values
	
	//initialize ports:
	DDRA = 0x00;
     4d0:	10 82       	st	Z, r1
     4d2:	82 e2       	ldi	r24, 0x22	; 34
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	27 e0       	ldi	r18, 0x07	; 7
	PORTA = 0x07;
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
     4dc:	8d e2       	ldi	r24, 0x2D	; 45
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	28 e3       	ldi	r18, 0x38	; 56

	DDRE = (1 << PE5) | (1 << PE4) | (1 << PE3);
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
     4e6:	8e e2       	ldi	r24, 0x2E	; 46
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	28 e3       	ldi	r18, 0x38	; 56
	PORTE = (1 << PE5) | (1 << PE4) | (1 << PE3);
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	28 e0       	ldi	r18, 0x08	; 8
	
	DDRH = (1 << PH3);
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 83       	st	Z, r18
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	28 e0       	ldi	r18, 0x08	; 8
	PORTH = (1 << PH3);
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
     504:	80 e3       	ldi	r24, 0x30	; 48
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
	
	DDRF = 0x00;
     50a:	10 82       	st	Z, r1
     50c:	81 e3       	ldi	r24, 0x31	; 49
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	fc 01       	movw	r30, r24
	PORTF = 0x00;
     512:	10 82       	st	Z, r1
     514:	8a e2       	ldi	r24, 0x2A	; 42
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	fc 01       	movw	r30, r24
	
	DDRD = 0x00;
     51a:	10 82       	st	Z, r1
     51c:	8b e2       	ldi	r24, 0x2B	; 43
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	21 e0       	ldi	r18, 0x01	; 1
	PORTD = 0x01;
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	fc 01       	movw	r30, r24
	
	DDRJ = 0x00;
     52c:	10 82       	st	Z, r1
     52e:	85 e0       	ldi	r24, 0x05	; 5
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	2f ef       	ldi	r18, 0xFF	; 255
	PORTJ = 0xFF;
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
     538:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <location_address+0x1>
     53c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <location_address>
		//Horizontal = OCR3B;		//assign PWM value to Horizontal variable
		//Hook = OCR3C;			//assign PWM value to Hook variable
		//printf("%u %u %u\n", Hook, Horizontal, Vertical); //print PWM values to serial monitor
		////end manual control
		//procedure 3:
		location_address = 0x0000;
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	88 23       	and	r24, r24
		if (jason == 0) //if push button pressed (PORTA bit 2)
     544:	09 f0       	breq	.+2      	; 0x548 <main+0xae>
     546:	8f c0       	rjmp	.+286    	; 0x666 <main+0x1cc>
     548:	72 de       	rcall	.-796    	; 0x22e <home>
		{
			home(); //bring to initial position
     54a:	0a e9       	ldi	r16, 0x9A	; 154
     54c:	10 e0       	ldi	r17, 0x00	; 0
			OCR3B = EEPROM_read_one(0x0001);
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	1c df       	rcall	.-456    	; 0x38c <EEPROM_read_one>
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	f8 01       	movw	r30, r16
     55a:	91 83       	std	Z+1, r25	; 0x01
     55c:	80 83       	st	Z, r24
     55e:	b0 de       	rcall	.-672    	; 0x2c0 <pickUp>
     560:	8a e9       	ldi	r24, 0x9A	; 154
			pickUp(); //pick up
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
			printf("\n%d", OCR3B);
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	29 2f       	mov	r18, r25
     56c:	2f 93       	push	r18
     56e:	8f 93       	push	r24
     570:	8e e0       	ldi	r24, 0x0E	; 14
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	89 2f       	mov	r24, r25
     576:	8f 93       	push	r24
     578:	8e e0       	ldi	r24, 0x0E	; 14
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	8f 93       	push	r24
     57e:	a6 d2       	rcall	.+1356   	; 0xacc <printf>
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <location_address>
     58c:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <location_address+0x1>
			printf("\n%d", Hread[location_address]);
     590:	9e 01       	movw	r18, r28
     592:	2d 5f       	subi	r18, 0xFD	; 253
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	fc 01       	movw	r30, r24
     59c:	80 81       	ld	r24, Z
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	29 2f       	mov	r18, r25
     5a4:	2f 93       	push	r18
     5a6:	8f 93       	push	r24
     5a8:	8e e0       	ldi	r24, 0x0E	; 14
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	89 2f       	mov	r24, r25
     5ae:	8f 93       	push	r24
     5b0:	8e e0       	ldi	r24, 0x0E	; 14
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	8f 93       	push	r24
     5b6:	8a d2       	rcall	.+1300   	; 0xacc <printf>
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <location_address>
     5c4:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <location_address+0x1>
			location_address++;
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <location_address+0x1>
     5ce:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <location_address>
     5d2:	0a e9       	ldi	r16, 0x9A	; 154
     5d4:	10 e0       	ldi	r17, 0x00	; 0
			OCR3B = EEPROM_read_one(0x0002);
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	d8 de       	rcall	.-592    	; 0x38c <EEPROM_read_one>
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	f8 01       	movw	r30, r16
     5e2:	91 83       	std	Z+1, r25	; 0x01
     5e4:	80 83       	st	Z, r24
     5e6:	83 de       	rcall	.-762    	; 0x2ee <putDown>
     5e8:	8a e9       	ldi	r24, 0x9A	; 154
     5ea:	90 e0       	ldi	r25, 0x00	; 0
			putDown(); //put down
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
			printf("\n%d", OCR3B);
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	29 2f       	mov	r18, r25
     5f4:	2f 93       	push	r18
     5f6:	8f 93       	push	r24
     5f8:	8e e0       	ldi	r24, 0x0E	; 14
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	89 2f       	mov	r24, r25
     5fe:	8f 93       	push	r24
     600:	8e e0       	ldi	r24, 0x0E	; 14
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	8f 93       	push	r24
     606:	62 d2       	rcall	.+1220   	; 0xacc <printf>
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	57 de       	rcall	.-850    	; 0x2c0 <pickUp>
     612:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <location_address>
			pickUp(); //pick up
     616:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <location_address+0x1>
			location_address++;
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <location_address+0x1>
     620:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <location_address>
     624:	0a e9       	ldi	r16, 0x9A	; 154
     626:	10 e0       	ldi	r17, 0x00	; 0
			OCR3B = EEPROM_read_one(0x0003);
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	af de       	rcall	.-674    	; 0x38c <EEPROM_read_one>
     62e:	88 2f       	mov	r24, r24
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	f8 01       	movw	r30, r16
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	80 83       	st	Z, r24
     638:	5a de       	rcall	.-844    	; 0x2ee <putDown>
     63a:	8a e9       	ldi	r24, 0x9A	; 154
     63c:	90 e0       	ldi	r25, 0x00	; 0
			putDown(); //put down
     63e:	fc 01       	movw	r30, r24
			printf("\n%d", OCR3B);
     640:	80 81       	ld	r24, Z
     642:	91 81       	ldd	r25, Z+1	; 0x01
     644:	29 2f       	mov	r18, r25
     646:	2f 93       	push	r18
     648:	8f 93       	push	r24
     64a:	8e e0       	ldi	r24, 0x0E	; 14
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	89 2f       	mov	r24, r25
     650:	8f 93       	push	r24
     652:	8e e0       	ldi	r24, 0x0E	; 14
     654:	92 e0       	ldi	r25, 0x02	; 2
     656:	8f 93       	push	r24
     658:	39 d2       	rcall	.+1138   	; 0xacc <printf>
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	89 83       	std	Y+1, r24	; 0x01
     666:	8a e0       	ldi	r24, 0x0A	; 10
			jason = 1;	
     668:	e7 e7       	ldi	r30, 0x77	; 119
     66a:	f2 e0       	ldi	r31, 0x02	; 2
		}	
		
		
		// procedure 4 and 5:	
		char com[] = "calibrate"; //used for compare string
     66c:	de 01       	movw	r26, r28
     66e:	19 96       	adiw	r26, 0x09	; 9
     670:	01 90       	ld	r0, Z+
     672:	0d 92       	st	X+, r0
     674:	8a 95       	dec	r24
     676:	e1 f7       	brne	.-8      	; 0x670 <main+0x1d6>
     678:	ce 01       	movw	r24, r28
     67a:	09 96       	adiw	r24, 0x09	; 9
     67c:	bc 01       	movw	r22, r24
		
		uint8_t calibrate; //used to start calibration
		
		calibrate = compare_strings(rx_buffer, com); //if rx buffer(value sent through cool term) and com are the same calibration return 0
     67e:	8e ed       	ldi	r24, 0xDE	; 222
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	b0 de       	rcall	.-672    	; 0x3e4 <compare_strings>
     684:	8a 83       	std	Y+2, r24	; 0x02
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	88 2f       	mov	r24, r24
     68a:	90 e0       	ldi	r25, 0x00	; 0
		printf("%u\n", calibrate); //print 1 before calibration starts
     68c:	29 2f       	mov	r18, r25
     68e:	2f 93       	push	r18
     690:	8f 93       	push	r24
     692:	82 e1       	ldi	r24, 0x12	; 18
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	89 2f       	mov	r24, r25
     698:	8f 93       	push	r24
     69a:	82 e1       	ldi	r24, 0x12	; 18
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	8f 93       	push	r24
     6a0:	15 d2       	rcall	.+1066   	; 0xacc <printf>
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <location_address+0x1>
     6ae:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <location_address>
		location_address = 0x0000; //set address to 0
     6b2:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <i>
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
		i = 0;
     6b8:	88 23       	and	r24, r24
		//*data_ptr = &Hread[0];
		if(calibrate == 0) //start calibration
     6ba:	09 f0       	breq	.+2      	; 0x6be <main+0x224>
     6bc:	3d cf       	rjmp	.-390    	; 0x538 <main+0x9e>
     6be:	86 e1       	ldi	r24, 0x16	; 22
     6c0:	92 e0       	ldi	r25, 0x02	; 2
		{
			printf("\n calibration in progress");
     6c2:	89 2f       	mov	r24, r25
     6c4:	8f 93       	push	r24
     6c6:	86 e1       	ldi	r24, 0x16	; 22
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	8f 93       	push	r24
     6cc:	ff d1       	rcall	.+1022   	; 0xacc <printf>
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	a7 c0       	rjmp	.+334    	; 0x822 <main+0x388>
     6d4:	08 e9       	ldi	r16, 0x98	; 152
			//run this loop while end pushbutton is not pressed:
			while ((PINA & 0x01) == 0x00) //stop pushbutton
     6d6:	10 e0       	ldi	r17, 0x00	; 0
			{
				while((PINA & 0x04) != 0x04) //read potentiometers position recorded button is not pressed
				{
					OCR3A = ADC_read_8(0);	// vertical - 5
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	3a dd       	rcall	.-1420   	; 0x150 <ADC_read_8>
     6dc:	88 2f       	mov	r24, r24
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	f8 01       	movw	r30, r16
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
     6e6:	0a e9       	ldi	r16, 0x9A	; 154
     6e8:	10 e0       	ldi	r17, 0x00	; 0
					OCR3B = ADC_read_8(7);	// horizontal - 2
     6ea:	87 e0       	ldi	r24, 0x07	; 7
     6ec:	31 dd       	rcall	.-1438   	; 0x150 <ADC_read_8>
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	f8 01       	movw	r30, r16
     6f4:	91 83       	std	Z+1, r25	; 0x01
     6f6:	80 83       	st	Z, r24
     6f8:	0c e9       	ldi	r16, 0x9C	; 156
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	82 e0       	ldi	r24, 0x02	; 2
					OCR3C = ADC_read_8(2);	// hook - 3
     6fe:	28 dd       	rcall	.-1456   	; 0x150 <ADC_read_8>
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	f8 01       	movw	r30, r16
     706:	91 83       	std	Z+1, r25	; 0x01
     708:	80 83       	st	Z, r24
     70a:	88 e9       	ldi	r24, 0x98	; 152
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	fc 01       	movw	r30, r24
     710:	80 81       	ld	r24, Z
					Vertical = OCR3A;		
     712:	91 81       	ldd	r25, Z+1	; 0x01
     714:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
     718:	8a e9       	ldi	r24, 0x9A	; 154
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
					Horizontal = OCR3B;	
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <Horizontal>
     726:	8c e9       	ldi	r24, 0x9C	; 156
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	fc 01       	movw	r30, r24
     72c:	80 81       	ld	r24, Z
					Hook = OCR3C;
     72e:	91 81       	ldd	r25, Z+1	; 0x01
     730:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <Hook>
     734:	80 e2       	ldi	r24, 0x20	; 32
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	fc 01       	movw	r30, r24
     73a:	80 81       	ld	r24, Z
					if (PINA & 0x01)
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	81 70       	andi	r24, 0x01	; 1
     742:	99 27       	eor	r25, r25
     744:	89 2b       	or	r24, r25
     746:	61 f4       	brne	.+24     	; 0x760 <main+0x2c6>
     748:	80 e2       	ldi	r24, 0x20	; 32
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
		{
			printf("\n calibration in progress");
			//run this loop while end pushbutton is not pressed:
			while ((PINA & 0x01) == 0x00) //stop pushbutton
			{
				while((PINA & 0x04) != 0x04) //read potentiometers position recorded button is not pressed
     74e:	80 81       	ld	r24, Z
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	84 70       	andi	r24, 0x04	; 4
     756:	99 27       	eor	r25, r25
     758:	89 2b       	or	r24, r25
     75a:	09 f4       	brne	.+2      	; 0x75e <main+0x2c4>
     75c:	bb cf       	rjmp	.-138    	; 0x6d4 <main+0x23a>
     75e:	01 c0       	rjmp	.+2      	; 0x762 <main+0x2c8>
     760:	00 00       	nop
     762:	80 e3       	ldi	r24, 0x30	; 48
     764:	92 e0       	ldi	r25, 0x02	; 2
					OCR3C = ADC_read_8(2);	// hook - 3
					Vertical = OCR3A;		
					Horizontal = OCR3B;	
					Hook = OCR3C;
					if (PINA & 0x01)
					break;					
     766:	89 2f       	mov	r24, r25
				}
				
				
				printf("\n position recorded");
     768:	8f 93       	push	r24
     76a:	80 e3       	ldi	r24, 0x30	; 48
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	8f 93       	push	r24
     770:	ad d1       	rcall	.+858    	; 0xacc <printf>
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <Horizontal>
     77a:	88 2f       	mov	r24, r24
				printf("\n Horizontal value: %u", Horizontal); //print PWM values to serial monitor
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	29 2f       	mov	r18, r25
     780:	2f 93       	push	r18
     782:	8f 93       	push	r24
     784:	84 e4       	ldi	r24, 0x44	; 68
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	89 2f       	mov	r24, r25
     78a:	8f 93       	push	r24
     78c:	84 e4       	ldi	r24, 0x44	; 68
     78e:	92 e0       	ldi	r25, 0x02	; 2
     790:	8f 93       	push	r24
     792:	9c d1       	rcall	.+824    	; 0xacc <printf>
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <i>
     7a0:	88 2f       	mov	r24, r24
				Hread[i] = Horizontal;
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <Horizontal>
     7a8:	9e 01       	movw	r18, r28
     7aa:	2d 5f       	subi	r18, 0xFD	; 253
     7ac:	3f 4f       	sbci	r19, 0xFF	; 255
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19
     7b2:	fc 01       	movw	r30, r24
     7b4:	40 83       	st	Z, r20
     7b6:	8e ee       	ldi	r24, 0xEE	; 238
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	70 d0       	rcall	.+224    	; 0x89c <ms_delay>
				ms_delay(750); //Delay for 1 second
     7bc:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <i>
     7c0:	88 2f       	mov	r24, r24
				printf("\n %d", Hread[i]);
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9e 01       	movw	r18, r28
     7c6:	2d 5f       	subi	r18, 0xFD	; 253
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	fc 01       	movw	r30, r24
     7d0:	80 81       	ld	r24, Z
     7d2:	88 2f       	mov	r24, r24
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	29 2f       	mov	r18, r25
     7d8:	2f 93       	push	r18
     7da:	8f 93       	push	r24
     7dc:	8b e5       	ldi	r24, 0x5B	; 91
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	89 2f       	mov	r24, r25
     7e2:	8f 93       	push	r24
     7e4:	8b e5       	ldi	r24, 0x5B	; 91
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	8f 93       	push	r24
     7ea:	70 d1       	rcall	.+736    	; 0xacc <printf>
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <i>
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
				i++; //update array variable
     7fa:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <i>
     7fe:	ce 01       	movw	r24, r28
     800:	03 96       	adiw	r24, 0x03	; 3
     802:	28 2f       	mov	r18, r24
				EEPROM_write_one_char(location_address, Hread);
     804:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <location_address>
     808:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <location_address+0x1>
     80c:	62 2f       	mov	r22, r18
     80e:	86 dd       	rcall	.-1268   	; 0x31c <EEPROM_write_one_char>
     810:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <location_address>
     814:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <location_address+0x1>
				location_address++;
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <location_address+0x1>
     81e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <location_address>
     822:	80 e2       	ldi	r24, 0x20	; 32
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
		//*data_ptr = &Hread[0];
		if(calibrate == 0) //start calibration
		{
			printf("\n calibration in progress");
			//run this loop while end pushbutton is not pressed:
			while ((PINA & 0x01) == 0x00) //stop pushbutton
     828:	80 81       	ld	r24, Z
     82a:	88 2f       	mov	r24, r24
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	99 27       	eor	r25, r25
     832:	89 2b       	or	r24, r25
     834:	09 f4       	brne	.+2      	; 0x838 <main+0x39e>
     836:	88 cf       	rjmp	.-240    	; 0x748 <main+0x2ae>
     838:	80 e6       	ldi	r24, 0x60	; 96
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	89 2f       	mov	r24, r25
				printf("\n %d", Hread[i]);
				i++; //update array variable
				EEPROM_write_one_char(location_address, Hread);
				location_address++;
			}
			printf("\n calibration complete");
     83e:	8f 93       	push	r24
     840:	80 e6       	ldi	r24, 0x60	; 96
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	8f 93       	push	r24
     846:	42 d1       	rcall	.+644    	; 0xacc <printf>
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	8a 83       	std	Y+2, r24	; 0x02
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
			calibrate = 1;
     854:	62 96       	adiw	r28, 0x12	; 18
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
// 		for (uint8_t i = 0; i < 6; i++){
// 			printf("%u ", EEPROM_location[i]);
// 		}
// 		printf("\n");
	}
}
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	0f 91       	pop	r16
     868:	08 95       	ret

0000086a <init_ms_timer0>:
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
void init_ms_timer0_tovo (void)
{
	TCNT0 = 241;
	TCCR0A = 0;
	TCCR0B = 0;
}
     872:	86 e4       	ldi	r24, 0x46	; 70
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fc 01       	movw	r30, r24
     878:	10 82       	st	Z, r1
     87a:	84 e4       	ldi	r24, 0x44	; 68
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	fc 01       	movw	r30, r24
     880:	10 82       	st	Z, r1
     882:	85 e4       	ldi	r24, 0x45	; 69
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	fc 01       	movw	r30, r24
     888:	10 82       	st	Z, r1
     88a:	87 e4       	ldi	r24, 0x47	; 71
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	2a ef       	ldi	r18, 0xFA	; 250
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
     894:	00 00       	nop
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <ms_delay>:

void ms_delay (uint16_t msec)
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <ms_delay+0x6>
     8a2:	1f 92       	push	r1
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	9c 83       	std	Y+4, r25	; 0x04
     8aa:	8b 83       	std	Y+3, r24	; 0x03
	for (uint16_t i = 0; i < msec; i++)
     8ac:	1a 82       	std	Y+2, r1	; 0x02
     8ae:	19 82       	std	Y+1, r1	; 0x01
     8b0:	26 c0       	rjmp	.+76     	; 0x8fe <ms_delay+0x62>
	{
		TCCR0B = 0x03;
     8b2:	85 e4       	ldi	r24, 0x45	; 69
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	23 e0       	ldi	r18, 0x03	; 3
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
		while ((TIFR0 & (1 << OCF0A)) == 0);
     8bc:	00 00       	nop
     8be:	85 e3       	ldi	r24, 0x35	; 53
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	82 70       	andi	r24, 0x02	; 2
     8cc:	99 27       	eor	r25, r25
     8ce:	89 2b       	or	r24, r25
     8d0:	b1 f3       	breq	.-20     	; 0x8be <ms_delay+0x22>
		TCCR0B = 0;
     8d2:	85 e4       	ldi	r24, 0x45	; 69
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	fc 01       	movw	r30, r24
     8d8:	10 82       	st	Z, r1
		TIFR0 = TIFR0 | (1 << OCF0A);
     8da:	85 e3       	ldi	r24, 0x35	; 53
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	25 e3       	ldi	r18, 0x35	; 53
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	22 60       	ori	r18, 0x02	; 2
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
		TCNT0 = 0;
     8ec:	86 e4       	ldi	r24, 0x46	; 70
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	10 82       	st	Z, r1
	TCCR0B = 0;
}

void ms_delay (uint16_t msec)
{
	for (uint16_t i = 0; i < msec; i++)
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	3a 81       	ldd	r19, Y+2	; 0x02
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	28 17       	cp	r18, r24
     908:	39 07       	cpc	r19, r25
     90a:	98 f2       	brcs	.-90     	; 0x8b2 <ms_delay+0x16>
		while ((TIFR0 & (1 << OCF0A)) == 0);
		TCCR0B = 0;
		TIFR0 = TIFR0 | (1 << OCF0A);
		TCNT0 = 0;
	}
}
     90c:	00 00       	nop
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <init_UART>:
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	80 ec       	ldi	r24, 0xC0	; 192
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	10 82       	st	Z, r1
     92c:	81 ec       	ldi	r24, 0xC1	; 193
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	28 e1       	ldi	r18, 0x18	; 24
     932:	fc 01       	movw	r30, r24
     934:	20 83       	st	Z, r18
     936:	82 ec       	ldi	r24, 0xC2	; 194
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	26 e0       	ldi	r18, 0x06	; 6
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
     940:	84 ec       	ldi	r24, 0xC4	; 196
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	27 e6       	ldi	r18, 0x67	; 103
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
     94a:	85 ec       	ldi	r24, 0xC5	; 197
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	fc 01       	movw	r30, r24
     950:	10 82       	st	Z, r1
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__iob+0x3>
     95a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__iob+0x2>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <__iob+0x1>
     966:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <__iob>
     96a:	00 00       	nop
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <uart_putchar>:
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	00 d0       	rcall	.+0      	; 0x978 <uart_putchar+0x6>
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	7b 83       	std	Y+3, r23	; 0x03
     980:	6a 83       	std	Y+2, r22	; 0x02
     982:	00 00       	nop
     984:	80 ec       	ldi	r24, 0xC0	; 192
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	80 81       	ld	r24, Z
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	80 72       	andi	r24, 0x20	; 32
     992:	99 27       	eor	r25, r25
     994:	89 2b       	or	r24, r25
     996:	b1 f3       	breq	.-20     	; 0x984 <uart_putchar+0x12>
     998:	86 ec       	ldi	r24, 0xC6	; 198
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	29 81       	ldd	r18, Y+1	; 0x01
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <uart_getch>:
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	00 d0       	rcall	.+0      	; 0x9b8 <uart_getch+0x6>
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	9b 83       	std	Y+3, r25	; 0x03
     9be:	8a 83       	std	Y+2, r24	; 0x02
     9c0:	00 00       	nop
     9c2:	80 ec       	ldi	r24, 0xC0	; 192
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	fc 01       	movw	r30, r24
     9c8:	80 81       	ld	r24, Z
     9ca:	88 23       	and	r24, r24
     9cc:	d4 f7       	brge	.-12     	; 0x9c2 <uart_getch+0x10>
     9ce:	86 ec       	ldi	r24, 0xC6	; 198
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <init_UART_3>:
	{
		temp = *str_ptr;		//save to temp char
		*str_ptr++;
		UART_out(temp);		//call uart out each time
	}
}
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	1f 92       	push	r1
     9f0:	1f 92       	push	r1
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	80 e3       	ldi	r24, 0x30	; 48
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	fc 01       	movw	r30, r24
     9fc:	10 82       	st	Z, r1
     9fe:	81 e3       	ldi	r24, 0x31	; 49
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	28 e9       	ldi	r18, 0x98	; 152
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	82 e3       	ldi	r24, 0x32	; 50
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	26 e0       	ldi	r18, 0x06	; 6
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
     a12:	87 e6       	ldi	r24, 0x67	; 103
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9a 83       	std	Y+2, r25	; 0x02
     a18:	89 83       	std	Y+1, r24	; 0x01
     a1a:	84 e3       	ldi	r24, 0x34	; 52
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	29 81       	ldd	r18, Y+1	; 0x01
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
     a24:	85 e3       	ldi	r24, 0x35	; 53
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	fc 01       	movw	r30, r24
     a2a:	10 82       	st	Z, r1
     a2c:	00 00       	nop
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <__vector_54>:
// 	while ((UCSR3A & (1 << RXC3)) == 0);
// 	return (UDR3);
// }

ISR (USART3_RX_vect)	//interrupt for rx
{
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     a48:	0f 92       	push	r0
     a4a:	2f 93       	push	r18
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	cd b7       	in	r28, 0x3d	; 61
     a5a:	de b7       	in	r29, 0x3e	; 62
	rx_char = UDR3;	//save recieved char
     a5c:	86 e3       	ldi	r24, 0x36	; 54
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <rx_char>
	
	if (rx_char == 0x0D){	//save all recieved chars to array unless "ENTER" is sent
     a68:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <rx_char>
     a6c:	8d 30       	cpi	r24, 0x0D	; 13
     a6e:	71 f4       	brne	.+28     	; 0xa8c <__vector_54+0x54>
		rx_buffer[array_index] = '\0';
     a70:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <array_index>
     a74:	88 2f       	mov	r24, r24
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	82 52       	subi	r24, 0x22	; 34
     a7a:	9d 4f       	sbci	r25, 0xFD	; 253
     a7c:	fc 01       	movw	r30, r24
     a7e:	10 82       	st	Z, r1
// 		array_index ++;
// 		rx_buffer[array_index] = '0';
		LCD_update = 1;	//set flag to true
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <LCD_update>
		array_index = 0;	//reset index for next run
     a86:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <array_index>
	} else {
		rx_buffer[array_index] = rx_char;	//save char to array
		array_index++;	//increment index
	}

} 
     a8a:	0f c0       	rjmp	.+30     	; 0xaaa <__vector_54+0x72>
// 		array_index ++;
// 		rx_buffer[array_index] = '0';
		LCD_update = 1;	//set flag to true
		array_index = 0;	//reset index for next run
	} else {
		rx_buffer[array_index] = rx_char;	//save char to array
     a8c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <array_index>
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <rx_char>
     a98:	82 52       	subi	r24, 0x22	; 34
     a9a:	9d 4f       	sbci	r25, 0xFD	; 253
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
		array_index++;	//increment index
     aa0:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <array_index>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
     aa6:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <array_index>
	}

} 
     aaa:	00 00       	nop
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	2f 91       	pop	r18
     aba:	0f 90       	pop	r0
     abc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
     ac0:	0f 90       	pop	r0
     ac2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <printf>:
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	ae 01       	movw	r20, r28
     ad6:	4a 5f       	subi	r20, 0xFA	; 250
     ad8:	5f 4f       	sbci	r21, 0xFF	; 255
     ada:	fa 01       	movw	r30, r20
     adc:	61 91       	ld	r22, Z+
     ade:	71 91       	ld	r23, Z+
     ae0:	af 01       	movw	r20, r30
     ae2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__iob+0x2>
     ae6:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <__iob+0x3>
     aea:	03 d0       	rcall	.+6      	; 0xaf2 <vfprintf>
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	08 95       	ret

00000af2 <vfprintf>:
     af2:	2f 92       	push	r2
     af4:	3f 92       	push	r3
     af6:	4f 92       	push	r4
     af8:	5f 92       	push	r5
     afa:	6f 92       	push	r6
     afc:	7f 92       	push	r7
     afe:	8f 92       	push	r8
     b00:	9f 92       	push	r9
     b02:	af 92       	push	r10
     b04:	bf 92       	push	r11
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
     b1a:	2b 97       	sbiw	r28, 0x0b	; 11
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	6c 01       	movw	r12, r24
     b28:	7b 01       	movw	r14, r22
     b2a:	8a 01       	movw	r16, r20
     b2c:	fc 01       	movw	r30, r24
     b2e:	17 82       	std	Z+7, r1	; 0x07
     b30:	16 82       	std	Z+6, r1	; 0x06
     b32:	83 81       	ldd	r24, Z+3	; 0x03
     b34:	81 ff       	sbrs	r24, 1
     b36:	bf c1       	rjmp	.+894    	; 0xeb6 <vfprintf+0x3c4>
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	3c 01       	movw	r6, r24
     b3e:	f6 01       	movw	r30, r12
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	f7 01       	movw	r30, r14
     b44:	93 fd       	sbrc	r25, 3
     b46:	85 91       	lpm	r24, Z+
     b48:	93 ff       	sbrs	r25, 3
     b4a:	81 91       	ld	r24, Z+
     b4c:	7f 01       	movw	r14, r30
     b4e:	88 23       	and	r24, r24
     b50:	09 f4       	brne	.+2      	; 0xb54 <vfprintf+0x62>
     b52:	ad c1       	rjmp	.+858    	; 0xeae <vfprintf+0x3bc>
     b54:	85 32       	cpi	r24, 0x25	; 37
     b56:	39 f4       	brne	.+14     	; 0xb66 <vfprintf+0x74>
     b58:	93 fd       	sbrc	r25, 3
     b5a:	85 91       	lpm	r24, Z+
     b5c:	93 ff       	sbrs	r25, 3
     b5e:	81 91       	ld	r24, Z+
     b60:	7f 01       	movw	r14, r30
     b62:	85 32       	cpi	r24, 0x25	; 37
     b64:	21 f4       	brne	.+8      	; 0xb6e <vfprintf+0x7c>
     b66:	b6 01       	movw	r22, r12
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	d6 d1       	rcall	.+940    	; 0xf18 <fputc>
     b6c:	e8 cf       	rjmp	.-48     	; 0xb3e <vfprintf+0x4c>
     b6e:	91 2c       	mov	r9, r1
     b70:	21 2c       	mov	r2, r1
     b72:	31 2c       	mov	r3, r1
     b74:	ff e1       	ldi	r31, 0x1F	; 31
     b76:	f3 15       	cp	r31, r3
     b78:	d8 f0       	brcs	.+54     	; 0xbb0 <vfprintf+0xbe>
     b7a:	8b 32       	cpi	r24, 0x2B	; 43
     b7c:	79 f0       	breq	.+30     	; 0xb9c <vfprintf+0xaa>
     b7e:	38 f4       	brcc	.+14     	; 0xb8e <vfprintf+0x9c>
     b80:	80 32       	cpi	r24, 0x20	; 32
     b82:	79 f0       	breq	.+30     	; 0xba2 <vfprintf+0xb0>
     b84:	83 32       	cpi	r24, 0x23	; 35
     b86:	a1 f4       	brne	.+40     	; 0xbb0 <vfprintf+0xbe>
     b88:	23 2d       	mov	r18, r3
     b8a:	20 61       	ori	r18, 0x10	; 16
     b8c:	1d c0       	rjmp	.+58     	; 0xbc8 <vfprintf+0xd6>
     b8e:	8d 32       	cpi	r24, 0x2D	; 45
     b90:	61 f0       	breq	.+24     	; 0xbaa <vfprintf+0xb8>
     b92:	80 33       	cpi	r24, 0x30	; 48
     b94:	69 f4       	brne	.+26     	; 0xbb0 <vfprintf+0xbe>
     b96:	23 2d       	mov	r18, r3
     b98:	21 60       	ori	r18, 0x01	; 1
     b9a:	16 c0       	rjmp	.+44     	; 0xbc8 <vfprintf+0xd6>
     b9c:	83 2d       	mov	r24, r3
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	38 2e       	mov	r3, r24
     ba2:	e3 2d       	mov	r30, r3
     ba4:	e4 60       	ori	r30, 0x04	; 4
     ba6:	3e 2e       	mov	r3, r30
     ba8:	2a c0       	rjmp	.+84     	; 0xbfe <vfprintf+0x10c>
     baa:	f3 2d       	mov	r31, r3
     bac:	f8 60       	ori	r31, 0x08	; 8
     bae:	1d c0       	rjmp	.+58     	; 0xbea <vfprintf+0xf8>
     bb0:	37 fc       	sbrc	r3, 7
     bb2:	2d c0       	rjmp	.+90     	; 0xc0e <vfprintf+0x11c>
     bb4:	20 ed       	ldi	r18, 0xD0	; 208
     bb6:	28 0f       	add	r18, r24
     bb8:	2a 30       	cpi	r18, 0x0A	; 10
     bba:	40 f0       	brcs	.+16     	; 0xbcc <vfprintf+0xda>
     bbc:	8e 32       	cpi	r24, 0x2E	; 46
     bbe:	b9 f4       	brne	.+46     	; 0xbee <vfprintf+0xfc>
     bc0:	36 fc       	sbrc	r3, 6
     bc2:	75 c1       	rjmp	.+746    	; 0xeae <vfprintf+0x3bc>
     bc4:	23 2d       	mov	r18, r3
     bc6:	20 64       	ori	r18, 0x40	; 64
     bc8:	32 2e       	mov	r3, r18
     bca:	19 c0       	rjmp	.+50     	; 0xbfe <vfprintf+0x10c>
     bcc:	36 fe       	sbrs	r3, 6
     bce:	06 c0       	rjmp	.+12     	; 0xbdc <vfprintf+0xea>
     bd0:	8a e0       	ldi	r24, 0x0A	; 10
     bd2:	98 9e       	mul	r9, r24
     bd4:	20 0d       	add	r18, r0
     bd6:	11 24       	eor	r1, r1
     bd8:	92 2e       	mov	r9, r18
     bda:	11 c0       	rjmp	.+34     	; 0xbfe <vfprintf+0x10c>
     bdc:	ea e0       	ldi	r30, 0x0A	; 10
     bde:	2e 9e       	mul	r2, r30
     be0:	20 0d       	add	r18, r0
     be2:	11 24       	eor	r1, r1
     be4:	22 2e       	mov	r2, r18
     be6:	f3 2d       	mov	r31, r3
     be8:	f0 62       	ori	r31, 0x20	; 32
     bea:	3f 2e       	mov	r3, r31
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <vfprintf+0x10c>
     bee:	8c 36       	cpi	r24, 0x6C	; 108
     bf0:	21 f4       	brne	.+8      	; 0xbfa <vfprintf+0x108>
     bf2:	83 2d       	mov	r24, r3
     bf4:	80 68       	ori	r24, 0x80	; 128
     bf6:	38 2e       	mov	r3, r24
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <vfprintf+0x10c>
     bfa:	88 36       	cpi	r24, 0x68	; 104
     bfc:	41 f4       	brne	.+16     	; 0xc0e <vfprintf+0x11c>
     bfe:	f7 01       	movw	r30, r14
     c00:	93 fd       	sbrc	r25, 3
     c02:	85 91       	lpm	r24, Z+
     c04:	93 ff       	sbrs	r25, 3
     c06:	81 91       	ld	r24, Z+
     c08:	7f 01       	movw	r14, r30
     c0a:	81 11       	cpse	r24, r1
     c0c:	b3 cf       	rjmp	.-154    	; 0xb74 <vfprintf+0x82>
     c0e:	98 2f       	mov	r25, r24
     c10:	9f 7d       	andi	r25, 0xDF	; 223
     c12:	95 54       	subi	r25, 0x45	; 69
     c14:	93 30       	cpi	r25, 0x03	; 3
     c16:	28 f4       	brcc	.+10     	; 0xc22 <vfprintf+0x130>
     c18:	0c 5f       	subi	r16, 0xFC	; 252
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	9f e3       	ldi	r25, 0x3F	; 63
     c1e:	99 83       	std	Y+1, r25	; 0x01
     c20:	0d c0       	rjmp	.+26     	; 0xc3c <vfprintf+0x14a>
     c22:	83 36       	cpi	r24, 0x63	; 99
     c24:	31 f0       	breq	.+12     	; 0xc32 <vfprintf+0x140>
     c26:	83 37       	cpi	r24, 0x73	; 115
     c28:	71 f0       	breq	.+28     	; 0xc46 <vfprintf+0x154>
     c2a:	83 35       	cpi	r24, 0x53	; 83
     c2c:	09 f0       	breq	.+2      	; 0xc30 <vfprintf+0x13e>
     c2e:	55 c0       	rjmp	.+170    	; 0xcda <vfprintf+0x1e8>
     c30:	20 c0       	rjmp	.+64     	; 0xc72 <vfprintf+0x180>
     c32:	f8 01       	movw	r30, r16
     c34:	80 81       	ld	r24, Z
     c36:	89 83       	std	Y+1, r24	; 0x01
     c38:	0e 5f       	subi	r16, 0xFE	; 254
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	88 24       	eor	r8, r8
     c3e:	83 94       	inc	r8
     c40:	91 2c       	mov	r9, r1
     c42:	53 01       	movw	r10, r6
     c44:	12 c0       	rjmp	.+36     	; 0xc6a <vfprintf+0x178>
     c46:	28 01       	movw	r4, r16
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	4f 0e       	add	r4, r31
     c4c:	51 1c       	adc	r5, r1
     c4e:	f8 01       	movw	r30, r16
     c50:	a0 80       	ld	r10, Z
     c52:	b1 80       	ldd	r11, Z+1	; 0x01
     c54:	36 fe       	sbrs	r3, 6
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x16c>
     c58:	69 2d       	mov	r22, r9
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <vfprintf+0x170>
     c5e:	6f ef       	ldi	r22, 0xFF	; 255
     c60:	7f ef       	ldi	r23, 0xFF	; 255
     c62:	c5 01       	movw	r24, r10
     c64:	4e d1       	rcall	.+668    	; 0xf02 <strnlen>
     c66:	4c 01       	movw	r8, r24
     c68:	82 01       	movw	r16, r4
     c6a:	f3 2d       	mov	r31, r3
     c6c:	ff 77       	andi	r31, 0x7F	; 127
     c6e:	3f 2e       	mov	r3, r31
     c70:	15 c0       	rjmp	.+42     	; 0xc9c <vfprintf+0x1aa>
     c72:	28 01       	movw	r4, r16
     c74:	22 e0       	ldi	r18, 0x02	; 2
     c76:	42 0e       	add	r4, r18
     c78:	51 1c       	adc	r5, r1
     c7a:	f8 01       	movw	r30, r16
     c7c:	a0 80       	ld	r10, Z
     c7e:	b1 80       	ldd	r11, Z+1	; 0x01
     c80:	36 fe       	sbrs	r3, 6
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <vfprintf+0x198>
     c84:	69 2d       	mov	r22, r9
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <vfprintf+0x19c>
     c8a:	6f ef       	ldi	r22, 0xFF	; 255
     c8c:	7f ef       	ldi	r23, 0xFF	; 255
     c8e:	c5 01       	movw	r24, r10
     c90:	2d d1       	rcall	.+602    	; 0xeec <strnlen_P>
     c92:	4c 01       	movw	r8, r24
     c94:	f3 2d       	mov	r31, r3
     c96:	f0 68       	ori	r31, 0x80	; 128
     c98:	3f 2e       	mov	r3, r31
     c9a:	82 01       	movw	r16, r4
     c9c:	33 fc       	sbrc	r3, 3
     c9e:	19 c0       	rjmp	.+50     	; 0xcd2 <vfprintf+0x1e0>
     ca0:	82 2d       	mov	r24, r2
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	88 16       	cp	r8, r24
     ca6:	99 06       	cpc	r9, r25
     ca8:	a0 f4       	brcc	.+40     	; 0xcd2 <vfprintf+0x1e0>
     caa:	b6 01       	movw	r22, r12
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	33 d1       	rcall	.+614    	; 0xf18 <fputc>
     cb2:	2a 94       	dec	r2
     cb4:	f5 cf       	rjmp	.-22     	; 0xca0 <vfprintf+0x1ae>
     cb6:	f5 01       	movw	r30, r10
     cb8:	37 fc       	sbrc	r3, 7
     cba:	85 91       	lpm	r24, Z+
     cbc:	37 fe       	sbrs	r3, 7
     cbe:	81 91       	ld	r24, Z+
     cc0:	5f 01       	movw	r10, r30
     cc2:	b6 01       	movw	r22, r12
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	28 d1       	rcall	.+592    	; 0xf18 <fputc>
     cc8:	21 10       	cpse	r2, r1
     cca:	2a 94       	dec	r2
     ccc:	21 e0       	ldi	r18, 0x01	; 1
     cce:	82 1a       	sub	r8, r18
     cd0:	91 08       	sbc	r9, r1
     cd2:	81 14       	cp	r8, r1
     cd4:	91 04       	cpc	r9, r1
     cd6:	79 f7       	brne	.-34     	; 0xcb6 <vfprintf+0x1c4>
     cd8:	e1 c0       	rjmp	.+450    	; 0xe9c <vfprintf+0x3aa>
     cda:	84 36       	cpi	r24, 0x64	; 100
     cdc:	11 f0       	breq	.+4      	; 0xce2 <vfprintf+0x1f0>
     cde:	89 36       	cpi	r24, 0x69	; 105
     ce0:	39 f5       	brne	.+78     	; 0xd30 <vfprintf+0x23e>
     ce2:	f8 01       	movw	r30, r16
     ce4:	37 fe       	sbrs	r3, 7
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <vfprintf+0x204>
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	0c 5f       	subi	r16, 0xFC	; 252
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	08 c0       	rjmp	.+16     	; 0xd06 <vfprintf+0x214>
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	07 2e       	mov	r0, r23
     cfc:	00 0c       	add	r0, r0
     cfe:	88 0b       	sbc	r24, r24
     d00:	99 0b       	sbc	r25, r25
     d02:	0e 5f       	subi	r16, 0xFE	; 254
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	f3 2d       	mov	r31, r3
     d08:	ff 76       	andi	r31, 0x6F	; 111
     d0a:	3f 2e       	mov	r3, r31
     d0c:	97 ff       	sbrs	r25, 7
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <vfprintf+0x230>
     d10:	90 95       	com	r25
     d12:	80 95       	com	r24
     d14:	70 95       	com	r23
     d16:	61 95       	neg	r22
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	8f 4f       	sbci	r24, 0xFF	; 255
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	f0 68       	ori	r31, 0x80	; 128
     d20:	3f 2e       	mov	r3, r31
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a3 01       	movw	r20, r6
     d28:	33 d1       	rcall	.+614    	; 0xf90 <__ultoa_invert>
     d2a:	88 2e       	mov	r8, r24
     d2c:	86 18       	sub	r8, r6
     d2e:	44 c0       	rjmp	.+136    	; 0xdb8 <vfprintf+0x2c6>
     d30:	85 37       	cpi	r24, 0x75	; 117
     d32:	31 f4       	brne	.+12     	; 0xd40 <vfprintf+0x24e>
     d34:	23 2d       	mov	r18, r3
     d36:	2f 7e       	andi	r18, 0xEF	; 239
     d38:	b2 2e       	mov	r11, r18
     d3a:	2a e0       	ldi	r18, 0x0A	; 10
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	25 c0       	rjmp	.+74     	; 0xd8a <vfprintf+0x298>
     d40:	93 2d       	mov	r25, r3
     d42:	99 7f       	andi	r25, 0xF9	; 249
     d44:	b9 2e       	mov	r11, r25
     d46:	8f 36       	cpi	r24, 0x6F	; 111
     d48:	c1 f0       	breq	.+48     	; 0xd7a <vfprintf+0x288>
     d4a:	18 f4       	brcc	.+6      	; 0xd52 <vfprintf+0x260>
     d4c:	88 35       	cpi	r24, 0x58	; 88
     d4e:	79 f0       	breq	.+30     	; 0xd6e <vfprintf+0x27c>
     d50:	ae c0       	rjmp	.+348    	; 0xeae <vfprintf+0x3bc>
     d52:	80 37       	cpi	r24, 0x70	; 112
     d54:	19 f0       	breq	.+6      	; 0xd5c <vfprintf+0x26a>
     d56:	88 37       	cpi	r24, 0x78	; 120
     d58:	21 f0       	breq	.+8      	; 0xd62 <vfprintf+0x270>
     d5a:	a9 c0       	rjmp	.+338    	; 0xeae <vfprintf+0x3bc>
     d5c:	e9 2f       	mov	r30, r25
     d5e:	e0 61       	ori	r30, 0x10	; 16
     d60:	be 2e       	mov	r11, r30
     d62:	b4 fe       	sbrs	r11, 4
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <vfprintf+0x28e>
     d66:	fb 2d       	mov	r31, r11
     d68:	f4 60       	ori	r31, 0x04	; 4
     d6a:	bf 2e       	mov	r11, r31
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <vfprintf+0x28e>
     d6e:	34 fe       	sbrs	r3, 4
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <vfprintf+0x294>
     d72:	29 2f       	mov	r18, r25
     d74:	26 60       	ori	r18, 0x06	; 6
     d76:	b2 2e       	mov	r11, r18
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0x294>
     d7a:	28 e0       	ldi	r18, 0x08	; 8
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <vfprintf+0x298>
     d80:	20 e1       	ldi	r18, 0x10	; 16
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x298>
     d86:	20 e1       	ldi	r18, 0x10	; 16
     d88:	32 e0       	ldi	r19, 0x02	; 2
     d8a:	f8 01       	movw	r30, r16
     d8c:	b7 fe       	sbrs	r11, 7
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <vfprintf+0x2ac>
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	82 81       	ldd	r24, Z+2	; 0x02
     d96:	93 81       	ldd	r25, Z+3	; 0x03
     d98:	0c 5f       	subi	r16, 0xFC	; 252
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x2b8>
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 5f       	subi	r16, 0xFE	; 254
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	a3 01       	movw	r20, r6
     dac:	f1 d0       	rcall	.+482    	; 0xf90 <__ultoa_invert>
     dae:	88 2e       	mov	r8, r24
     db0:	86 18       	sub	r8, r6
     db2:	fb 2d       	mov	r31, r11
     db4:	ff 77       	andi	r31, 0x7F	; 127
     db6:	3f 2e       	mov	r3, r31
     db8:	36 fe       	sbrs	r3, 6
     dba:	0d c0       	rjmp	.+26     	; 0xdd6 <vfprintf+0x2e4>
     dbc:	23 2d       	mov	r18, r3
     dbe:	2e 7f       	andi	r18, 0xFE	; 254
     dc0:	a2 2e       	mov	r10, r18
     dc2:	89 14       	cp	r8, r9
     dc4:	58 f4       	brcc	.+22     	; 0xddc <vfprintf+0x2ea>
     dc6:	34 fe       	sbrs	r3, 4
     dc8:	0b c0       	rjmp	.+22     	; 0xde0 <vfprintf+0x2ee>
     dca:	32 fc       	sbrc	r3, 2
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <vfprintf+0x2ee>
     dce:	83 2d       	mov	r24, r3
     dd0:	8e 7e       	andi	r24, 0xEE	; 238
     dd2:	a8 2e       	mov	r10, r24
     dd4:	05 c0       	rjmp	.+10     	; 0xde0 <vfprintf+0x2ee>
     dd6:	b8 2c       	mov	r11, r8
     dd8:	a3 2c       	mov	r10, r3
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <vfprintf+0x2f0>
     ddc:	b8 2c       	mov	r11, r8
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <vfprintf+0x2f0>
     de0:	b9 2c       	mov	r11, r9
     de2:	a4 fe       	sbrs	r10, 4
     de4:	0f c0       	rjmp	.+30     	; 0xe04 <vfprintf+0x312>
     de6:	fe 01       	movw	r30, r28
     de8:	e8 0d       	add	r30, r8
     dea:	f1 1d       	adc	r31, r1
     dec:	80 81       	ld	r24, Z
     dee:	80 33       	cpi	r24, 0x30	; 48
     df0:	21 f4       	brne	.+8      	; 0xdfa <vfprintf+0x308>
     df2:	9a 2d       	mov	r25, r10
     df4:	99 7e       	andi	r25, 0xE9	; 233
     df6:	a9 2e       	mov	r10, r25
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <vfprintf+0x31a>
     dfa:	a2 fe       	sbrs	r10, 2
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <vfprintf+0x318>
     dfe:	b3 94       	inc	r11
     e00:	b3 94       	inc	r11
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <vfprintf+0x31a>
     e04:	8a 2d       	mov	r24, r10
     e06:	86 78       	andi	r24, 0x86	; 134
     e08:	09 f0       	breq	.+2      	; 0xe0c <vfprintf+0x31a>
     e0a:	b3 94       	inc	r11
     e0c:	a3 fc       	sbrc	r10, 3
     e0e:	10 c0       	rjmp	.+32     	; 0xe30 <vfprintf+0x33e>
     e10:	a0 fe       	sbrs	r10, 0
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <vfprintf+0x32e>
     e14:	b2 14       	cp	r11, r2
     e16:	80 f4       	brcc	.+32     	; 0xe38 <vfprintf+0x346>
     e18:	28 0c       	add	r2, r8
     e1a:	92 2c       	mov	r9, r2
     e1c:	9b 18       	sub	r9, r11
     e1e:	0d c0       	rjmp	.+26     	; 0xe3a <vfprintf+0x348>
     e20:	b2 14       	cp	r11, r2
     e22:	58 f4       	brcc	.+22     	; 0xe3a <vfprintf+0x348>
     e24:	b6 01       	movw	r22, r12
     e26:	80 e2       	ldi	r24, 0x20	; 32
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	76 d0       	rcall	.+236    	; 0xf18 <fputc>
     e2c:	b3 94       	inc	r11
     e2e:	f8 cf       	rjmp	.-16     	; 0xe20 <vfprintf+0x32e>
     e30:	b2 14       	cp	r11, r2
     e32:	18 f4       	brcc	.+6      	; 0xe3a <vfprintf+0x348>
     e34:	2b 18       	sub	r2, r11
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0x34a>
     e38:	98 2c       	mov	r9, r8
     e3a:	21 2c       	mov	r2, r1
     e3c:	a4 fe       	sbrs	r10, 4
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <vfprintf+0x36c>
     e40:	b6 01       	movw	r22, r12
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	68 d0       	rcall	.+208    	; 0xf18 <fputc>
     e48:	a2 fe       	sbrs	r10, 2
     e4a:	16 c0       	rjmp	.+44     	; 0xe78 <vfprintf+0x386>
     e4c:	a1 fc       	sbrc	r10, 1
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x364>
     e50:	88 e7       	ldi	r24, 0x78	; 120
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x368>
     e56:	88 e5       	ldi	r24, 0x58	; 88
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	b6 01       	movw	r22, r12
     e5c:	0c c0       	rjmp	.+24     	; 0xe76 <vfprintf+0x384>
     e5e:	8a 2d       	mov	r24, r10
     e60:	86 78       	andi	r24, 0x86	; 134
     e62:	51 f0       	breq	.+20     	; 0xe78 <vfprintf+0x386>
     e64:	a1 fe       	sbrs	r10, 1
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x37a>
     e68:	8b e2       	ldi	r24, 0x2B	; 43
     e6a:	01 c0       	rjmp	.+2      	; 0xe6e <vfprintf+0x37c>
     e6c:	80 e2       	ldi	r24, 0x20	; 32
     e6e:	a7 fc       	sbrc	r10, 7
     e70:	8d e2       	ldi	r24, 0x2D	; 45
     e72:	b6 01       	movw	r22, r12
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	50 d0       	rcall	.+160    	; 0xf18 <fputc>
     e78:	89 14       	cp	r8, r9
     e7a:	30 f4       	brcc	.+12     	; 0xe88 <vfprintf+0x396>
     e7c:	b6 01       	movw	r22, r12
     e7e:	80 e3       	ldi	r24, 0x30	; 48
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	4a d0       	rcall	.+148    	; 0xf18 <fputc>
     e84:	9a 94       	dec	r9
     e86:	f8 cf       	rjmp	.-16     	; 0xe78 <vfprintf+0x386>
     e88:	8a 94       	dec	r8
     e8a:	f3 01       	movw	r30, r6
     e8c:	e8 0d       	add	r30, r8
     e8e:	f1 1d       	adc	r31, r1
     e90:	80 81       	ld	r24, Z
     e92:	b6 01       	movw	r22, r12
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	40 d0       	rcall	.+128    	; 0xf18 <fputc>
     e98:	81 10       	cpse	r8, r1
     e9a:	f6 cf       	rjmp	.-20     	; 0xe88 <vfprintf+0x396>
     e9c:	22 20       	and	r2, r2
     e9e:	09 f4       	brne	.+2      	; 0xea2 <vfprintf+0x3b0>
     ea0:	4e ce       	rjmp	.-868    	; 0xb3e <vfprintf+0x4c>
     ea2:	b6 01       	movw	r22, r12
     ea4:	80 e2       	ldi	r24, 0x20	; 32
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	37 d0       	rcall	.+110    	; 0xf18 <fputc>
     eaa:	2a 94       	dec	r2
     eac:	f7 cf       	rjmp	.-18     	; 0xe9c <vfprintf+0x3aa>
     eae:	f6 01       	movw	r30, r12
     eb0:	86 81       	ldd	r24, Z+6	; 0x06
     eb2:	97 81       	ldd	r25, Z+7	; 0x07
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x3c8>
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	9f ef       	ldi	r25, 0xFF	; 255
     eba:	2b 96       	adiw	r28, 0x0b	; 11
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	af 90       	pop	r10
     eda:	9f 90       	pop	r9
     edc:	8f 90       	pop	r8
     ede:	7f 90       	pop	r7
     ee0:	6f 90       	pop	r6
     ee2:	5f 90       	pop	r5
     ee4:	4f 90       	pop	r4
     ee6:	3f 90       	pop	r3
     ee8:	2f 90       	pop	r2
     eea:	08 95       	ret

00000eec <strnlen_P>:
     eec:	fc 01       	movw	r30, r24
     eee:	05 90       	lpm	r0, Z+
     ef0:	61 50       	subi	r22, 0x01	; 1
     ef2:	70 40       	sbci	r23, 0x00	; 0
     ef4:	01 10       	cpse	r0, r1
     ef6:	d8 f7       	brcc	.-10     	; 0xeee <strnlen_P+0x2>
     ef8:	80 95       	com	r24
     efa:	90 95       	com	r25
     efc:	8e 0f       	add	r24, r30
     efe:	9f 1f       	adc	r25, r31
     f00:	08 95       	ret

00000f02 <strnlen>:
     f02:	fc 01       	movw	r30, r24
     f04:	61 50       	subi	r22, 0x01	; 1
     f06:	70 40       	sbci	r23, 0x00	; 0
     f08:	01 90       	ld	r0, Z+
     f0a:	01 10       	cpse	r0, r1
     f0c:	d8 f7       	brcc	.-10     	; 0xf04 <strnlen+0x2>
     f0e:	80 95       	com	r24
     f10:	90 95       	com	r25
     f12:	8e 0f       	add	r24, r30
     f14:	9f 1f       	adc	r25, r31
     f16:	08 95       	ret

00000f18 <fputc>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	fb 01       	movw	r30, r22
     f22:	23 81       	ldd	r18, Z+3	; 0x03
     f24:	21 fd       	sbrc	r18, 1
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <fputc+0x16>
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	2c c0       	rjmp	.+88     	; 0xf86 <fputc+0x6e>
     f2e:	22 ff       	sbrs	r18, 2
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <fputc+0x46>
     f32:	46 81       	ldd	r20, Z+6	; 0x06
     f34:	57 81       	ldd	r21, Z+7	; 0x07
     f36:	24 81       	ldd	r18, Z+4	; 0x04
     f38:	35 81       	ldd	r19, Z+5	; 0x05
     f3a:	42 17       	cp	r20, r18
     f3c:	53 07       	cpc	r21, r19
     f3e:	44 f4       	brge	.+16     	; 0xf50 <fputc+0x38>
     f40:	a0 81       	ld	r26, Z
     f42:	b1 81       	ldd	r27, Z+1	; 0x01
     f44:	9d 01       	movw	r18, r26
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	31 83       	std	Z+1, r19	; 0x01
     f4c:	20 83       	st	Z, r18
     f4e:	8c 93       	st	X, r24
     f50:	26 81       	ldd	r18, Z+6	; 0x06
     f52:	37 81       	ldd	r19, Z+7	; 0x07
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	37 83       	std	Z+7, r19	; 0x07
     f5a:	26 83       	std	Z+6, r18	; 0x06
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <fputc+0x6e>
     f5e:	8b 01       	movw	r16, r22
     f60:	ec 01       	movw	r28, r24
     f62:	fb 01       	movw	r30, r22
     f64:	00 84       	ldd	r0, Z+8	; 0x08
     f66:	f1 85       	ldd	r31, Z+9	; 0x09
     f68:	e0 2d       	mov	r30, r0
     f6a:	19 95       	eicall
     f6c:	89 2b       	or	r24, r25
     f6e:	e1 f6       	brne	.-72     	; 0xf28 <fputc+0x10>
     f70:	d8 01       	movw	r26, r16
     f72:	16 96       	adiw	r26, 0x06	; 6
     f74:	8d 91       	ld	r24, X+
     f76:	9c 91       	ld	r25, X
     f78:	17 97       	sbiw	r26, 0x07	; 7
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	17 96       	adiw	r26, 0x07	; 7
     f7e:	9c 93       	st	X, r25
     f80:	8e 93       	st	-X, r24
     f82:	16 97       	sbiw	r26, 0x06	; 6
     f84:	ce 01       	movw	r24, r28
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <__ultoa_invert>:
     f90:	fa 01       	movw	r30, r20
     f92:	aa 27       	eor	r26, r26
     f94:	28 30       	cpi	r18, 0x08	; 8
     f96:	51 f1       	breq	.+84     	; 0xfec <__ultoa_invert+0x5c>
     f98:	20 31       	cpi	r18, 0x10	; 16
     f9a:	81 f1       	breq	.+96     	; 0xffc <__ultoa_invert+0x6c>
     f9c:	e8 94       	clt
     f9e:	6f 93       	push	r22
     fa0:	6e 7f       	andi	r22, 0xFE	; 254
     fa2:	6e 5f       	subi	r22, 0xFE	; 254
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	af 4f       	sbci	r26, 0xFF	; 255
     fac:	b1 e0       	ldi	r27, 0x01	; 1
     fae:	3e d0       	rcall	.+124    	; 0x102c <__ultoa_invert+0x9c>
     fb0:	b4 e0       	ldi	r27, 0x04	; 4
     fb2:	3c d0       	rcall	.+120    	; 0x102c <__ultoa_invert+0x9c>
     fb4:	67 0f       	add	r22, r23
     fb6:	78 1f       	adc	r23, r24
     fb8:	89 1f       	adc	r24, r25
     fba:	9a 1f       	adc	r25, r26
     fbc:	a1 1d       	adc	r26, r1
     fbe:	68 0f       	add	r22, r24
     fc0:	79 1f       	adc	r23, r25
     fc2:	8a 1f       	adc	r24, r26
     fc4:	91 1d       	adc	r25, r1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	6a 0f       	add	r22, r26
     fca:	71 1d       	adc	r23, r1
     fcc:	81 1d       	adc	r24, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	a1 1d       	adc	r26, r1
     fd2:	20 d0       	rcall	.+64     	; 0x1014 <__ultoa_invert+0x84>
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__ultoa_invert+0x48>
     fd6:	68 94       	set
     fd8:	3f 91       	pop	r19
     fda:	2a e0       	ldi	r18, 0x0A	; 10
     fdc:	26 9f       	mul	r18, r22
     fde:	11 24       	eor	r1, r1
     fe0:	30 19       	sub	r19, r0
     fe2:	30 5d       	subi	r19, 0xD0	; 208
     fe4:	31 93       	st	Z+, r19
     fe6:	de f6       	brtc	.-74     	; 0xf9e <__ultoa_invert+0xe>
     fe8:	cf 01       	movw	r24, r30
     fea:	08 95       	ret
     fec:	46 2f       	mov	r20, r22
     fee:	47 70       	andi	r20, 0x07	; 7
     ff0:	40 5d       	subi	r20, 0xD0	; 208
     ff2:	41 93       	st	Z+, r20
     ff4:	b3 e0       	ldi	r27, 0x03	; 3
     ff6:	0f d0       	rcall	.+30     	; 0x1016 <__ultoa_invert+0x86>
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x5c>
     ffa:	f6 cf       	rjmp	.-20     	; 0xfe8 <__ultoa_invert+0x58>
     ffc:	46 2f       	mov	r20, r22
     ffe:	4f 70       	andi	r20, 0x0F	; 15
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	4a 33       	cpi	r20, 0x3A	; 58
    1004:	18 f0       	brcs	.+6      	; 0x100c <__ultoa_invert+0x7c>
    1006:	49 5d       	subi	r20, 0xD9	; 217
    1008:	31 fd       	sbrc	r19, 1
    100a:	40 52       	subi	r20, 0x20	; 32
    100c:	41 93       	st	Z+, r20
    100e:	02 d0       	rcall	.+4      	; 0x1014 <__ultoa_invert+0x84>
    1010:	a9 f7       	brne	.-22     	; 0xffc <__ultoa_invert+0x6c>
    1012:	ea cf       	rjmp	.-44     	; 0xfe8 <__ultoa_invert+0x58>
    1014:	b4 e0       	ldi	r27, 0x04	; 4
    1016:	a6 95       	lsr	r26
    1018:	97 95       	ror	r25
    101a:	87 95       	ror	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	ba 95       	dec	r27
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__ultoa_invert+0x86>
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	61 05       	cpc	r22, r1
    1028:	71 05       	cpc	r23, r1
    102a:	08 95       	ret
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	0a 2e       	mov	r0, r26
    1032:	06 94       	lsr	r0
    1034:	57 95       	ror	r21
    1036:	47 95       	ror	r20
    1038:	37 95       	ror	r19
    103a:	27 95       	ror	r18
    103c:	ba 95       	dec	r27
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__ultoa_invert+0xa2>
    1040:	62 0f       	add	r22, r18
    1042:	73 1f       	adc	r23, r19
    1044:	84 1f       	adc	r24, r20
    1046:	95 1f       	adc	r25, r21
    1048:	a0 1d       	adc	r26, r0
    104a:	08 95       	ret

0000104c <_exit>:
    104c:	f8 94       	cli

0000104e <__stop_program>:
    104e:	ff cf       	rjmp	.-2      	; 0x104e <__stop_program>
